; http://docs.platformio.org/page/projectconf.html
[platformio]
; src_dir = .
; default_envs=main
default_envs=main32

; [git_rev]
; build_flags =!python git_rev_macro.py

; [v]
; major="1"
; minor="0"
; patch="45"
; rev=!python git_rev_macro.py
; build_nr="0"
; should increment automatically each new build on same commit? and reset on commit

[no_warn]
build_flags=-w

; [exceptions]
; ; Remove default exceptions disabled flag
; build_unflags = -fno-exceptions
; ; Enable exceptions
; build_flags = -fexceptions


[a]
lib_deps_ext =
      NeoPixelBus
      RotaryEncoder
      ESPAsyncE131
      ConfigManager
      https://github.com/tzapu/WiFiManager.git#development
      ArduinoJson@5.13.4
      ; EspSaveCrash
      ; WifiEspNow
      ; WiFiManager
      ; AppleMidi
      ; Homie
; candidates:
; https://github.com/ETLCPP/etl Embedded Template Library - lite STL
; https://github.com/malachi-iot/estdlib influenced by ETL, tailored a bit towards ESP
; ArduinoSTL - uClibc++ for arduino.
; StandardCplusplus
platform = https://github.com/platformio/platform-espressif8266.git#feature/stage
; platform = https://github.com/esp8266/Arduino.git#branch/gcc9.1
; platform = https://github.com/esp8266/Arduino.git
platform_stable = espressif8266
framework = arduino
targets = upload
f_cpu = 160000000L
u_serial=build_scripts/pre_serial_upload.py
u_ota   =build_scripts/ota.py
u_always=build_scripts/generate_completions.py
fw_version=1.0.75
build_flags =
    -D SERIAL_BAUD=115200
    -D DEFAULT_HZ=40
    -D FW_VERSION=${a.fw_version}
    -D FW_NAME=pixTol
    -D FW_BRAND=tolgrAVen
    -Og
    -Wno-unused-function
    -Wno-unused-variable
    -Wall
    -std=gnu++17
    -fexceptions
    ; -fdisable-ipa-fnsplit   ; no inline ICACHE_RAM_ATTR optimization.https://github.com/esp8266/Arduino/issues/6900
    ; -D PIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY

build_unflags =
    -std=c++11
    -fno-exceptions
    -Os
lib_ignore=GDBStub
; include guards dont work unless ldf is chain+...

;   dunno wtf id need this but eh
;   getting $T04#b8
;   init is $T05#b9
;
; -DFW_BRAND="tolgrAVen"
; -DFW_NAME="pixTol"
; -DFW_VERSION="${v.major}-${v.minor}-${v.patch}-${v.rev}-${v.build_nr}"
; -D FW_VERSION="1.0.46"
;    -D BUILD_ENV_NAME=$PIOENV
;    -D PLATFORM_NAME=$PIOPLATFORM
;    -D BUILD_TIME=$UNIX_TIME ;causes constant full recompiles I guess...
;    -w

[env:main]
board = d1_mini
targets=${a.targets}
platform=${a.platform}
; platform=${a.platform_stable}
platform_packages = framework-arduinoespressif8266@4, toolchain-xtensa@3
framework=${a.framework}
lib_deps=${a.lib_deps_ext}
test_filter=d1_mini
build_type = debug
board_build.f_cpu=${a.f_cpu}
build_flags=${a.build_flags}
build_unflags=${a.build_unflags}
monitor_speed=115200
upload_speed=460800
lib_ldf_mode = chain+
; makes include guards work!
; lib_ldf_mode = deep+      ;possibly fixes some dumb lib shit but makes compile slow as balls
; extra_scripts = ${a.u_always}, ${a.u_serial}

; WHEN GOT GDBSTUB UART0 CANT RUN PIXELS!!  figure out whether use UART1, DMA or whatever...
; still prob want 0+1 for reg operation so can run shorter strips and faster dithering?
[env:d1_mini_debug]
board = d1_mini
debug_port=/dev/tty.usbserial-14630
targets=${a.targets}
platform=${a.platform}
; platform=${a.platform_stable}
platform_packages = framework-arduinoespressif8266@4, toolchain-xtensa@3
framework=${a.framework}
lib_deps=${a.lib_deps_ext}
test_filter=d1_mini
build_type = debug
lib_ldf_mode = chain+
build_unflags = -Os -fno-exceptions -std=c++11
build_flags =
    -D TOL_DEBUG
    -D SERIAL_BAUD=115200
    -D DEFAULT_HZ=40
    -Wno-unused-function
    -Wno-unused-variable
    -D ENABLE_GDB=1
    -D GDBSTUB_FREERTOS=0
    -D GDBSTUB_BREAK_ON_INIT=0
    -D GDBSTUB_BREAK_ON_EXCEPTION=1
    -ggdb
    -Og
    -Wall
    -std=c++17
    -fexceptions
    ; -fsanitize
    ; dunno if sanitize can work and properly log to serial?

    ; -DDEBUG_ESP_PORT=Serial
    ; -DDEBUG_ESP_CORE -DDEBUG_ESP_WIFI -DDEBUG_ESP_OOM
    ; -include "umm_malloc/umm_malloc_cfg.h"

  ; -DDEBUG_ESP_TLS_MEM -DDEBUG_ESP_OTA -DDEBUG_ESP_HTTP_UPDATE -DDEBUG_ESP_UPDATER -DDEBUG_ESP_HTTP_CLIENT


;; REMOTE NOTE!!!
;; gdbstub will be fucked unless --force-remote added to pio agent run, to update sources...
;; which also kinda kills the point if agent is a fucking slow raspberry heh.
;; buuut then xtensa gdb just crashes heavily on my macos.
;; fuck all this.
;; FILE BUG REPORT!! better yet track down and fix then PR.
;; issue is that (I think) platformio.ini is still updated, and paths (!) still reference remote ones
;; which will be outdated or nonexistent. So it's half working which is so much worse than not at all.
;
[idf]
build_flags=-DCORE_DEBUG_LEVEL=5
            -DPIO_FRAMEWORK_ESP_IDF_ENABLE_EXCEPTIONS

; working with idf + arduino, but not through pio.
; use idf.py/cmake at least for now, flexible/good to learn anyways
; tho likely 4.0 will be sorted in pio soon/eventually
[env:main32]
board = esp32dev
targets=${a.targets}
platform=espressif32
platform_packages = framework-espidf @ 4.0, framework-arduinoespressif32 @ 4.0
; framework=${a.framework}
framework=arduino, espidf
lib_deps=${a.lib_deps_ext}
test_filter=d1_mini
build_flags=${a.build_flags} ;${idf.build_flags}
build_unflags =-Os
monitor_speed=115200
upload_speed=460800
lib_ldf_mode = chain+
; lib_ldf_mode = deep

; [env:esp32]
; board = wemosbat
; targets=${a.targets}
; platform = https://github.com/platformio/platform-espressif32.git#feature/stage
; framework=${a.framework}
; test_filter=esp32
; ; build_flags=-D ESP32, ${a.build_flags}
; build_flags=
;     -D ESP32=1
;     -D SERIAL_BAUD=74880
;     -D DEFAULT_HZ=40
;     -w
; ; lib_deps = git+https://github.com/timpur/homie-esp8266/tree/esp32
; lib_deps = git+https://github.com/timpur/homie-esp8266#esp32
; ; lib_extr_dirs = lib_esp32
; extra_scripts = ${a.u_always}, ${a.u_serial}
; upload_speed = 921600
; ; monitor_baud = 115200


; [env:conf]
; board = d1_mini
; platform = espressif8266
; framework = ${a.framework}
; ; lib_deps =  ${a.build_flags}
; extra_scripts = build_scripts/conf_ota.py

[env:native]
platform = native
test_filter = native
test_ignore = d1_mini
lib_ldf_mode = chain+
; lib_archive = false

;docs.platformio.org/en/latest/projectconf/section_env_build.html
;AVAILABLE VARS:
; $PYTHONEXE,  full path to current Python interpreter
; $UNIX_TIME,  current time in Unix format
; $PIOENV,    name of build environment from “platformio.ini” (Project Configuration File)
; $PIOPLATFORM, name of development platform
; $PIOFRAMEWORK, name of framework
; $PIOHOME_DIR, PlatformIO Home directory
; $PROJECT_DIR, project directory
; $PROJECTBUILD_DIR, project build directory per all environments
; $BUILD_DIR

; dynamically change "LAST_BUILD_TIME" to $UNIX_TIME==NOW
; -> PlatformIO will not cache objects
; [env:ignore_incremental_builds]
; build_flags = -DLAST_BUILD_TIME=$UNIX_TIME
